name: Scrape CSFD

on:
  # Weekly schedule (Mon 03:00 UTC). Adjust as needed.
  schedule:
    - cron: "0 3 * * 1"
  # Allow manual runs with test mode selection
  workflow_dispatch:
    inputs:
      test_mode:
        description: 'Scraping mode'
        required: true
        default: 'test-small'
        type: choice
        options:
        - 'ultra-fast'       # --test --skipDetails (~30s)
        - 'test-small'       # --maxItems 10 (~2min)
        - 'test-medium'      # --maxPages 2 (~5min)
        - 'test-large'       # --maxPages 5 (~15min)
        - 'production'       # Full run (3+ hours)
      verbose:
        description: 'Enable verbose logging'
        required: false
        default: true
        type: boolean

jobs:
  scrape:
    runs-on: ubuntu-latest
    permissions:
      contents: write   # required to push changes back to the repo

    steps:
      # 1) Checkout repository
      - name: Checkout
        uses: actions/checkout@v4

      # 2) Setup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      # 3) Install dependencies and Playwright Chromium
      - name: Install deps (Playwright + Chromium)
        run: |
          npm i
          npx playwright install --with-deps chromium

      # 4) Run the scraper with selected mode
      - name: Run scraper (${{ github.event.inputs.test_mode || 'test-small' }})
        run: |
          VERBOSE_FLAG=""
          if [ "${{ github.event.inputs.verbose }}" = "true" ]; then
            VERBOSE_FLAG="--verbose"
          fi
          
          case "${{ github.event.inputs.test_mode || 'test-small' }}" in
            "ultra-fast")
              echo "üöÄ Ultra fast test (~30 seconds)"
              node scrape_csfd.mjs --test --skipDetails $VERBOSE_FLAG
              ;;
            "test-small")
              echo "üß™ Small test - 10 items (~2 minutes)"
              node scrape_csfd.mjs --maxItems 10 $VERBOSE_FLAG
              ;;
            "test-medium")
              echo "üìÑ Medium test - 2 pages (~5 minutes)"
              node scrape_csfd.mjs --maxPages 2 $VERBOSE_FLAG
              ;;
            "test-large")
              echo "üìö Large test - 5 pages (~15 minutes)"
              node scrape_csfd.mjs --maxPages 5 $VERBOSE_FLAG
              ;;
            "production")
              echo "üè≠ Production run - all data (3+ hours)"
              node scrape_csfd.mjs $VERBOSE_FLAG
              ;;
            *)
              echo "‚ùå Unknown test mode: ${{ github.event.inputs.test_mode }}"
              exit 1
              ;;
          esac

      # 5) Auto-compress JSON data for production use
      - name: Compress JSON data
        if: success()
        run: |
          echo "üóúÔ∏è Compressing JSON data..."
          node build_compress.mjs
          echo "‚úÖ Compression complete"
          ls -lah data/*.json* | head -10

      # 6) Commit only if data has changed
      - name: Commit data if changed
        if: success()
        run: |
          set -e
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add data/csfd_ratings.csv data/csfd_ratings.json data/csfd_ratings.json.gz data/csfd_ratings.json.br || true
          if ! git diff --cached --quiet; then
            git commit -m "Update CSFD dataset [skip ci]"
            git push
          else
            echo "No data changes; skipping commit."
          fi

      # 7) Always upload debug artifacts (screenshots/HTML) if present
      - name: Upload debug artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: debug
          path: |
            debug/**